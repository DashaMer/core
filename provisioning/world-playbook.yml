# This ansible playbook brings up the world according to host groups in inventory file

- hosts: all-hosts
  user: "{{ ansible_ssh_user }}"
  gather_facts: false
  tasks:
   - name: Check hosts UP and SSH is listening before taking actions
     local_action: wait_for
        host="{{ansible_ssh_host}}"
        port="{{ansible_ssh_port}}"
        state="started"
        delay=3
        connect_timeout=2
        timeout=300
   - name: INFO
     local_action: debug
        msg="If you fail on this step try execute  source source.global && ansible-playbook -i ${ANSIBLE_INVENTORY_FILE} provisioning/world-playbook.yml"

- hosts: all-hosts
  user: "{{ ansible_ssh_user }}"
  sudo: yes
  gather_facts: true
  tasks:
   - name: setup hostname
     hostname: name="{{ inventory_hostname }}"
   - debug: msg="{{ inventory_hostname }}"
   - sysctl: name="net.core.somaxconn" value=1024 sysctl_set=yes state=present reload=yes
   - sysctl: name="fs.file-max" value=402302 sysctl_set=yes state=present reload=yes

  roles:
    - role: ansible-swap
      swap_file_size: "{{ ansible_memtotal_mb }}M"

- hosts: masters
  user: "{{ ansible_ssh_user }}"
  sudo: yes
  gather_facts: true
  vars:
     masters_str: |
        {% set comma = joiner(",") %}
        {% set eth = "ansible_"+vpc_if %}
        {% for item in groups["masters"] -%}
            {{ comma() }}{{ hostvars[item][eth].ipv4.address }}
        {%- endfor %}
  pre_tasks:
    - set_fact:
        a_vpc_if: "ansible_{{ vpc_if }}"
    - set_fact:
        local_ip: "{{ hostvars[inventory_hostname][a_vpc_if].ipv4.address }}"
    - set_fact:
        masters : "{{ masters_str|trim|split(',') }}" 
    - set_fact:
        my_zoo_id : "{{ masters|index_of(local_ip) }}"
    - set_fact:
        my_zk_hostnames: "{{masters|join(':2181,')}}:2181"
    - set_fact:
        my_quorum: "{{ (masters|length)//2+1 }}"
    - set_fact:
        my_hostname: "master-{{ my_zoo_id }}"
    - debug:
        msg: "my_zk_hostnames {{ my_zk_hostnames }}"
    - debug:
        msg: "my_quorum {{ my_quorum }}"
    - debug:
        msg: "zoo_id={{ my_zoo_id }}"
  roles:
    - role: ansible-nginx
      nginx_worker_processes: 1
      nginx_remove_default: yes
      nginx_sites:
      - id: masters-share
        add_webroot: yes
        name: "service.consul.service"

    - role: ansible-consul
      dns_nameservers: ['127.0.0.1', '8.8.8.8', '8.8.4.4']
      dns_domain: "node.consul"
      consul_servers: "{{ masters }}"
      consul_is_server: true
      install_bind: true
      consul_domain: "consul."
      consul_port_dns: "8600"
      consul_bind_address: "{{ local_ip }}"

    - role: ansible-docker
      docker_opts: '"--insecure-registry docker-registry.service.consul:5000"'

#    - role: pintostack-zk
     
#    - role: ansible-zookeeper
#      zoo_id: "{{ my_zoo_id }}"
#      zookeeper_hosts: "{{ masters|to_zk }}"
#      zoo_ip: "{{ local_ip }}"
##      go_to: "http://{{local_ip}}:8500/v1/agent/service/register"
#
#    - role: ansible-mesos
#      mesos_ip: "{{ local_ip }}"
#      mesos_hostname: "{{ ansible_hostname }}"
#      zookeeper_hostnames: "{{ my_zk_hostnames }}"
#      mesos_install_mode: "master"
#      quorum: "{{ my_quorum }}"
#      mesos_version: 0.24.0
#
#    - role: ansible-marathon
#      marathon_port: 8080
#      zookeeper_hostnames: "{{ my_zk_hostnames }}"
#      marathon_hostname: "{{ ansible_hostname }}"
##      go_to: "http://{{local_ip}}:8500/v1/agent/service/register
  post_tasks:
    - shell: wget -O /var/www/masters-share/htdocs/spark-1.5.2-bin-hadoop2.6.tgz -q -c http://www.eu.apache.org/dist/spark/spark-1.5.2/spark-1.5.2-bin-hadoop2.6.tgz

- hosts: slaves
  user: "{{ ansible_ssh_user }}"
  sudo: yes
  vars:
    public_dns : ["8.8.8.8", "8.8.4.4"]
    masters_str: |
        {% set comma = joiner(",") %}
        {% set eth = "ansible_"+vpc_if %}
        {% for item in groups["masters"] -%}
            {{ comma() }}{{ hostvars[item][eth].ipv4.address }}
        {%- endfor %}
  pre_tasks:
    - set_fact:
        masters : "{{ masters_str|trim|split(',') }}" 
    - set_fact:
        my_zk_hostnames: "{{masters|join(':2181,')}}:2181"
    - set_fact:
        a_vpc_if: "ansible_{{ vpc_if }}"
    - set_fact:
        local_ip: "{{ hostvars[inventory_hostname][a_vpc_if].ipv4.address }}"
  roles:
    - role: ansible-consul
      dns_nameservers: "{{ public_dns }}"
      dns_domain: "node.consul"
      consul_servers: "{{ masters }}"
      install_bind: false
      dns_nameservers: "{{ masters }}"
      consul_is_server: false
      consul_domain: "consul."
      consul_client_address: "{{ local_ip }}"
      consul_bind_address: "{{ consul_client_address }}"

#    - role: ansible-mesos
#      mesos_ip: "{{ local_ip }}"
#      mesos_hostname: "{{ ansible_hostname }}"
#      mesos_containerizers: "docker,mesos"
#      zookeeper_hostnames: "{{ my_zk_hostnames }}"
#      mesos_resources: "mem(*):{{ ansible_memtotal_mb }}"
#      mesos_install_mode: "slave"
#      mesos_version: 0.24.0

    - role: ansible-docker
      docker_opts: '"--insecure-registry docker-registry.service.consul:5000"' 

#    - role: ansible-scala

#    - role: ansible-spark
#      spark_version: "1.5.2-bin-hadoop2.6"
#      spark_mirror: "http://mirror.cogentco.com/pub/apache/spark/spark-1.5.2"

#    - role: ansible-beats

  post_tasks:
#    - lineinfile: dest=/etc/environment line="SPARK_HOME={{ spark_usr_dir }}"
#    - lineinfile: dest=/etc/environment line="SCALA_HOME={{ scala_lib_path_target }}"
#    - lineinfile: dest=/etc/environment line="JAVA_HOME=/usr/lib/jvm/java-7-openjdk-amd64"


- hosts: dockers
  gather_facts: true
  user: "{{ ansible_ssh_user }}"
  sudo: yes
  vars:
    public_dns : ["8.8.8.8", "8.8.4.4"]
  vars:
    masters_str: |
        {% set comma = joiner(",") %}
        {% set eth = "ansible_"+vpc_if %}
        {% for item in groups["masters"] -%}
            {{ comma() }}{{ hostvars[item][eth].ipv4.address }}
        {%- endfor %}

  pre_tasks:
    - set_fact:
        masters : "{{ masters_str|trim|split(',') }}"
    - set_fact:
        a_vpc_if: "ansible_{{ vpc_if }}"
    - set_fact:
        local_ip: "{{ hostvars[inventory_hostname][a_vpc_if].ipv4.address }}"

  roles:
    - role: ansible-consul
      dns_nameservers: "{{ public_dns }}"
      dns_domain: "node.consul"
      consul_servers: "{{ masters }}"
      install_bind: false
      dns_nameservers: "{{ masters }}"
      consul_is_server: false
      consul_domain: "consul."
      consul_client_address: "{{ local_ip }}"
      consul_bind_address: "{{ consul_client_address }}"

    - role: ansible-docker-registry
      docker_registry_ip: "{{ local_ip }}"
      docker_registry_port: 5000

    - role: ansible-docker
      docker_opts: '"-s devicemapper --insecure-registry docker-registry.service.consul:5000"' 
