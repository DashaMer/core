# This ansible playbook brings up the world according to host groups in inventory file

- hosts: all-hosts
  user: "{{ ansible_ssh_user }}"
  gather_facts: false
  tasks:
   - name: Check hosts UP and SSH is listening before taking actions
     local_action: wait_for
        host="{{ansible_ssh_host}}"
        port="{{ansible_ssh_port}}"
        state="started"
        delay=3
        connect_timeout=2
        timeout=300
   - name: INFO
     local_action: debug
        msg="If you fail on this step try execute  source source.global && ansible-playbook -i ${ANSIBLE_INVENTORY_FILE} provisioning/world-playbook.yml"

- hosts: all-hosts
  user: "{{ ansible_ssh_user }}"
  sudo: yes
  gather_facts: true
  vars:
     public_dns : ["8.8.8.8", "8.8.4.4"]
     masters_str: |
        {% set comma = joiner(",") %}
        {% set eth = "ansible_"+vpc_if %}
        {% for item in groups["masters"] -%}
            {{ comma() }}{{ hostvars[item][eth].ipv4.address }}
        {%- endfor %}
  pre_tasks:
    - name: setup hostname
      hostname: name="{{ inventory_hostname }}"
    - shell: echo "127.0.0.1 {{inventory_hostname}}" >> /etc/hosts
    - sysctl: name="net.core.somaxconn" value=1024 sysctl_set=yes state=present reload=yes
    - sysctl: name="fs.file-max" value=402302 sysctl_set=yes state=present reload=yes
    - set_fact:
        a_vpc_if: "ansible_{{ vpc_if }}"
    - set_fact:
        local_ip: "{{ hostvars[inventory_hostname][a_vpc_if].ipv4.address }}"
    - set_fact:
        masters : "{{ masters_str|trim|split(',') }}"
    - debug: msg="{{masters}}"
    - set_fact:
        my_zoo_id : "{{ masters|index_of(local_ip) }}"
      when: inventory_hostname in groups["masters"]
    - set_fact:
        my_zk_hostnames: "{{ masters|join(':2181,') }}:2181"
    - set_fact:
        my_quorum: "{{ (masters|length)//2+1 }}"
    - set_fact:
        my_hostname: "master-{{ my_zoo_id }}"
      when: inventory_hostname in groups["masters"]

  roles:
    - role: ansible-swap
      swap_file_size: "{{ ansible_memtotal_mb }}M"

#    - role: ansible-nginx
#      nginx_worker_processes: 1
#      nginx_remove_default: yes
#      nginx_sites:
#       - id: masters-share
#         add_webroot: yes
#         name: "service.consul.service"
#      when: inventory_hostname in groups["masters"]

    - role: ansible-docker
#      docker_opts: '"--insecure-registry docker-registry.service.consul:5000"'

    - role: ansible-consul
      dns_nameservers: ['127.0.0.1', '8.8.8.8', '8.8.4.4']
      dns_domain: "node.consul"
      consul_servers: "{{ masters }}"
      consul_is_server: "{{ inventory_hostname in groups['masters'] }}"
      install_bind: "{{ inventory_hostname in groups['masters'] }}"
      consul_domain: "consul."
      consul_port_dns: "8600"
      consul_bind_address: "{{ local_ip }}"
#slave
#      install_bind: false
#      dns_nameservers: "{{ masters }}"
#      consul_is_server: false
#      consul_domain: "consul."
#      consul_client_address: "{{ local_ip }}"
#      consul_bind_address: "{{ consul_client_address }}"

#    - role: ansible-docker
#      docker_opts: '"--insecure-registry docker-registry.service.consul:5000"'

# TODO  zoo_id: "{{ my_zoo_id }}", zookeeper_hosts: "{{ masters|to_zk }}, go_to: "http://{{local_ip}}:8500/v1/agent/service/register"
    - role: pintostack-zk
      when: inventory_hostname in groups["masters"]

# TODO: #      quorum: "{{ my_quorum }}",
    - role: pintostack-mesos-master
      when: inventory_hostname in groups["masters"]

# TODO: ##      go_to: "http://{{local_ip}}:8500/v1/agent/service/register
    - role: pintostack-marathon
      when: inventory_hostname in groups["masters"]

    - role: pintostack-mesos-slave
      when: inventory_hostname not in groups["masters"]

    - role: ansible-beats
      when: inventory_hostname not in groups["masters"]

    - role: ansible-registrator
      registrator_consul_host: "127.0.0.1"
      registrator_consul_port: "8500"
      registrator_log_file: "/var/log/registrator.log"


  post_tasks:
    - shell: wget -O /var/www/masters-share/htdocs/spark-1.5.2-bin-hadoop2.6.tgz -q -c http://www.eu.apache.org/dist/spark/spark-1.5.2/spark-1.5.2-bin-hadoop2.6.tgz
      when: inventory_hostname in groups["masters"]
